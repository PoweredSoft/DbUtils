<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="FetchColumns" xml:space="preserve">
    <value>SELECT 
	C.*,
	COLUMNPROPERTY(object_id(QUOTENAME(T.TABLE_SCHEMA) + '.' + QUOTENAME(T.TABLE_NAME)), COLUMN_NAME, 'IsIdentity') IS_IDENTITY
FROM
	INFORMATION_SCHEMA.COLUMNS C
INNER JOIN	
	INFORMATION_SCHEMA.TABLES T
ON
	T.TABLE_NAME = C.TABLE_NAME
	AND
	T.TABLE_SCHEMA = C.TABLE_SCHEMA
WHERE 
	T.TABLE_TYPE = 'BASE TABLE'
ORDER BY
	C.TABLE_SCHEMA, 
	C.TABLE_NAME, 
	C.ORDINAL_POSITION</value>
  </data>
  <data name="FetchForeignKeys" xml:space="preserve">
    <value>SELECT
	FK.name AS FKName,
	OBJECT_SCHEMA_NAME(FKCOL.object_id) AS FKSchema,
	OBJECT_NAME(FKCOL.object_id) AS FKTable,
	FKCOL.name AS FKColumn,
	OBJECT_SCHEMA_NAME(PKCOL.object_id) AS PKSchema,
	OBJECT_NAME(PKCOL.object_id) AS PKTable,
	PKCOL.name AS PKColumn,
	FK.delete_referential_action_desc As DeleteCascadeAction,
	FK.update_referential_action_desc As UpdateCascadeAction
FROM sys.foreign_keys FK
INNER JOIN sys.foreign_key_columns FKC ON FKC.constraint_object_id = FK.object_id
INNER JOIN sys.columns FKCOL ON FKCOL.object_id = FKC.parent_object_id AND FKC.parent_column_id = FKCOL.column_id
INNER JOIN sys.columns PKCOL ON PKCOL.object_id = FKC.referenced_object_id AND PKCOL.column_id = FKC.referenced_column_id;</value>
  </data>
  <data name="FetchIndexes" xml:space="preserve">
    <value>SELECT 
     s.name as TableSchemaName,
     t.[name] As TableName,
     ind.name as IndexName,
     col.name  As ColumnName,
	 ic.is_included_column As IsIncludedColumn,
	 ind.is_unique_constraint As IsUniqueConstraint,
	 ind.has_filter As HasFilter,
	 ind.filter_definition As FilterDefinition,
	 ic.is_descending_key As IsDescendingKey,
	 ic.key_ordinal As KeyOrdinal
FROM 
     sys.indexes ind 
INNER JOIN 
     sys.index_columns ic ON  ind.object_id = ic.object_id and ind.index_id = ic.index_id 
INNER JOIN 
     sys.columns col ON ic.object_id = col.object_id and ic.column_id = col.column_id 
INNER JOIN 
     sys.tables t ON ind.object_id = t.object_id 
INNER JOIN 
	 sys.schemas s on s.schema_id = t.schema_id
WHERE 
     ind.is_primary_key = 0 AND t.is_ms_shipped = 0 
ORDER BY 
     t.name, ind.name, ind.index_id, ic.index_column_id;</value>
  </data>
  <data name="FetchPrimaryKeys" xml:space="preserve">
    <value>SELECT
	TC.CONSTRAINT_SCHEMA,
	TC.CONSTRAINT_NAME,
	TC.TABLE_SCHEMA,
	TC.TABLE_NAME,
	KCU.COLUMN_NAME,
	KCU.ORDINAL_POSITION

FROM
	INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
INNER JOIN
	INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCU
ON
	KCU.CONSTRAINT_SCHEMA = TC.CONSTRAINT_SCHEMA AND KCU.CONSTRAINT_NAME = TC.CONSTRAINT_NAME
WHERE
	TC.CONSTRAINT_TYPE= 'PRIMARY KEY'
ORDER BY
	TC.TABLE_SCHEMA,
	TC.TABLE_NAME,
	KCU.ORDINAL_POSITION</value>
  </data>
  <data name="FetchSequences" xml:space="preserve">
    <value>SELECT * FROM INFORMATION_SCHEMA.SEQUENCES</value>
  </data>
  <data name="FetchTables" xml:space="preserve">
    <value>SELECT 
	*
FROM
	INFORMATION_SCHEMA.TABLES T
WHERE 
	T.TABLE_TYPE = 'Base Table'
ORDER BY 
                  T.TABLE_SCHEMA, T.TABLE_NAME</value>
  </data>
  <data name="FetchVersion" xml:space="preserve">
    <value>SELECT SERVERPROPERTY ('productversion')</value>
  </data>
</root>